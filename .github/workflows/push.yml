on:
  push:
    branches:
      - master
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:
name: Qa workflow
env:
  extensions: mbstring, intl, iconv, libxml, dom, json, simplexml, zlib, fileinfo
  key: cache-v1 # can be any string, change to clear the extension cache.
  defaultPHPVersion: '7.2'
  phiveGPGKeys: 4AA394086372C20A,D2CCAC42F6295E7D,E82B2FB314E9906E,8A03EA3B385DBAA1,12CE0F1D262429A5
  phiveHome: $GITHUB_WORKSPACE/.phive
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: composer-require-checker:2.1.0

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --optimize-autoloader

#      - name: composer-require-checker
#        run: composer-require-checker check --config-file $GITHUB_WORKSPACE/composer-require-config.json composer.json

  phpunit-with-coverage:
    runs-on: ubuntu-latest
    name: Unit tests [7.2 | ubuntu-latest]
    needs: setup
    steps:
    - uses: actions/checkout@v2

    - name: Setup cache environment
      id: cache-env
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ env.defaultPHPVersion }}
        extensions: ${{ env.extensions }}
        key: ${{ env.key }}

    - name: Cache extensions
      uses: actions/cache@v2.1.7
      with:
        path: ${{ steps.cache-env.outputs.dir }}
        key: ${{ steps.cache-env.outputs.key }}
        restore-keys: ${{ steps.cache-env.outputs.key }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.defaultPHPVersion }}
        extensions: ${{ env.extensions }}
        ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
        tools: pecl, phive

    - name: Install Composer dependencies & cache dependencies
      uses: "ramsey/composer-install@v1"
      with:
        composer-options: --optimize-autoloader

    - name: Install PHAR dependencies
      env:
        GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} --force-accept-unsigned phpunit

    - name: PHPUnit
      uses: docker://phpdoc/phpunit-ga:latest
      with:
        args: --testsuite=unit
    - name: Quick check code coverage level
      run: php tests/coverage-checker.php 65

  codestyle:
    runs-on: ubuntu-latest
    needs:
      - setup
    steps:
      - uses: actions/checkout@v2
      - name: Restore/cache vendor folder
        uses: actions/cache@v2.1.7
        with:
          path: vendor
          key: all-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            all-build-${{ hashFiles('**/composer.lock') }}
            all-build-
      - name: Code style check
        uses: phpDocumentor/coding-standard@latest
        with:
          args: -s

  phpstan:
    runs-on: ubuntu-latest
    needs:
      - setup
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: pecl

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --optimize-autoloader

      - name: PHPStan
        uses: phpDocumentor/phpstan-ga@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: analyse src tests incubator/guides/src incubator/guides/tests --configuration phpstan.neon

  psalm:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: 7.3
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: pecl, psalm

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --optimize-autoloader

      - name: Psalm
        run: psalm --output-format=github

  build-phar:
    runs-on: ubuntu-latest
    name: Build PHAR to test with
    needs:
      - setup
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: pecl

      - name: Install Composer dependencies & cache dependencies
        env:
          COMPOSER_MIRROR_PATH_REPOS: 1
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --optimize-autoloader

      - name: warm cache
        uses: phpDocumentor/phar-ga@latest
        with:
          args: php bin/console cache:warmup --env=prod
      - name: build phar
        uses: phpDocumentor/phar-ga@latest
        with:
          args: box compile
      - name: list keys
        uses: phpDocumentor/phar-ga@latest
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        with:
          args: gpg --list-secret-keys

      - name: sign phar
        uses: phpDocumentor/phar-ga@latest
        if: github.ref == 'refs/heads/master'
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        with:
          args: gpg --command-fd 0 --pinentry-mode loopback -u info@phpdoc.org --batch
            --detach-sign --output build/phpDocumentor.phar.asc build/phpDocumentor.phar
      - name: Upload PHAR file
        uses: actions/upload-artifact@v2.3.0
        with:
          name: phpDocumentor.phar
          path: build/phpDocumentor.phar

  e2e:
    runs-on: ubuntu-latest
    name: E2E tests [ubuntu-latest]
    if: github.repository == 'phpDocumentor/phpDocumentor'
    needs:
      - setup
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.defaultPHPVersion }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: pecl

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --optimize-autoloader

      - name: Build example project using Clean template
        run: ./bin/phpdoc --template=clean -vvv --config=data/examples/MariosPizzeria/phpdoc.xml --target=build/clean --setting="guides.enabled=false"
      - name: Build example project using Default template
        run: ./bin/phpdoc --template=default -vvv --config=data/examples/MariosPizzeria/phpdoc.xml --target=build/default --setting="guides.enabled=false"
      - name: Test Default template using Cypress
        uses: cypress-io/github-action@v2
        with:
          record: true
          group: 'template/default'
          spec: cypress/integration/default/*
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test Clean template using Cypress
        uses: cypress-io/github-action@v2
        with:
          record: true
          group: 'template/clean'
          spec: cypress/integration/clean/*
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  phpunit:
    runs-on: ${{ matrix.operating-system }}
    continue-on-error: ${{ matrix.php-versions == '8.0' }}
    strategy:
      matrix:
        operating-system:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        php-versions:
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        exclude: # already covered in pre-test with coverage above
          - operating-system: 'ubuntu-latest'
            php-versions: '7.2'
    name: Unit tests [${{ matrix.php-versions }} | ${{ matrix.operating-system }}]

    needs:
    - phpunit-with-coverage
    - phpstan
    - codestyle
    steps:
    - uses: actions/checkout@v2

    - name: Setup cache environment
      id: cache-env
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.extensions }}
        key: ${{ env.key }}

    - name: Cache extensions
      uses: actions/cache@v2.1.7
      with:
        path: ${{ steps.cache-env.outputs.dir }}
        key: ${{ steps.cache-env.outputs.key }}
        restore-keys: ${{ steps.cache-env.outputs.key }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.extensions }}
        ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
        tools: pecl, phive

    - name: Install Composer dependencies & cache dependencies
      uses: "ramsey/composer-install@v1"
      with:
        composer-options: --optimize-autoloader

    # Retry composer step again because of: https://github.com/ramsey/composer-install/issues/79
    - name: Install Composer dependencies & cache dependencies
      if: ${{ failure() }}
      uses: "ramsey/composer-install@v1"
      with:
        composer-options: --optimize-autoloader

      # Retry composer step a third time because of: https://github.com/ramsey/composer-install/issues/79
    - name: Install Composer dependencies & cache dependencies
      if: ${{ failure() }}
      uses: "ramsey/composer-install@v1"
      with:
        composer-options: --optimize-autoloader

    - name: Install PHAR dependencies
      env:
        GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} --force-accept-unsigned

    - name: Install phpunit 8 for php 7.2
      if: matrix.php-versions == '7.2'
      env:
        GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} phpunit:^8.5

    - name: Run PHPUnit
      run: php tools/phpunit --testsuite=unit,integration

  e2e-matrix:
    runs-on: ${{ matrix.operating-system }}
    if: github.repository == 'phpDocumentor/phpDocumentor'
    strategy:
      matrix:
        php-versions:
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        operating-system:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    name: E2E tests on PHAR [${{ matrix.php-versions }} | ${{ matrix.operating-system }}]
    needs:
      - e2e
      - build-phar
    continue-on-error: ${{ matrix.php-versions == '8.0' }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: pecl

      - name: Download PHAR file
        uses: actions/download-artifact@v2.0.10
        with:
          name: phpDocumentor.phar
          path: build

      - name: Check version
        run: php ./build/phpDocumentor.phar --version

      - name: Run phpDocumentor on itself
        run: php ./build/phpDocumentor.phar -vvv  --setting="guides.enabled=false"

      - name: Build example project using Clean template
        run: php ./build/phpDocumentor.phar --template=clean --config=data/examples/MariosPizzeria/phpdoc.xml --target=build/clean --setting="guides.enabled=false"

      - name: Build example project using Default template
        run: php ./build/phpDocumentor.phar --template=default --config=data/examples/MariosPizzeria/phpdoc.xml --target=build/default --setting="guides.enabled=false"

      - name: Test Default template using Cypress
        uses: cypress-io/github-action@v2
        with:
          record: true
          group: 'template/default/${{ matrix.php-versions }}/${{ matrix.operating-system }}'
          spec: cypress/integration/default/*
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Clean template using Cypress
        uses: cypress-io/github-action@v2
        with:
          record: true
          group: 'template/clean/${{ matrix.php-versions }}/${{ matrix.operating-system }}'
          spec: cypress/integration/clean/*
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  website:
    runs-on: ubuntu-latest
    name: Trigger website build
    if: github.repository == 'phpDocumentor/phpDocumentor' && github.ref == 'refs/heads/master'
    needs:
      - e2e
      - phpunit
    steps:
      - name: Trigger
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Website
          token: ${{ secrets.BOT_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    name: Trigger docker build
    if: github.repository == 'phpDocumentor/phpDocumentor' && github.ref == 'refs/heads/master'
    needs:
      - e2e
      - phpunit
    steps:
      - name: Trigger
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Docker build
          token: ${{ secrets.BOT_TOKEN }}
