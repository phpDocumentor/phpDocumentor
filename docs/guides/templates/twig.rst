Using twig
==========

phpDocumentor provides the `Twig 1.x engine`_ as a rendering engine for templates.

.. _Twig 1.x engine: https://twig.symfony.com/doc/1.x/

Configuration
-------------

The Twig engine can be configured in your template's ``template.xml`` through the ``<parameters>`` tag.

.. code-block:: xml

    <template>
        <parameters>
            <parameter key="config-key">config-value</parameter>
        </parameters>
    </template>

Caching
~~~~~~~

phpDocumentor enables Twig's compilation cache by default. When developing Twig templates, you need to turn this off in your ``template.xml`` by enabling debug mode:

.. code-block:: xml

    <parameter key="twig-debug">true</parameter>

This will also make the Twig debug extension available, which provides the `dump()`_ function.

.. _dump(): https://twig.symfony.com/doc/1.x/functions/dump.html

Custom Extensions
~~~~~~~~~~~~~~~~~

Custom `Twig extensions`_ can be enabled and configured through parameters.

.. _Twig extensions: https://twig.symfony.com/doc/1.x/advanced.html#creating-an-extension

.. code-block:: xml

    <parameter key="twig-extension">Your\Custom\Extension</parameter>

    <!-- You may configure multiple extensions by repeating the parameter with different values -->
    <parameter key="twig-extension">Your\Custom\SecondExtension</parameter>

phpDocumentor will attempt to autoload the class, allowing you to use `Composer's autoloading functionality`_ to load the class.

.. _Composer's autoloading functionality: https://getcomposer.org/doc/04-schema.md#autoload

Your extension class may optionally implement ``phpDocumentor\Transformer\Writer\Twig\ExtensionInterface``, which will cause your constructor to be passed additionalÂ information about the project and transformation.

Global Variables
----------------

The Twig writer provides two primary variables for use in your templates:

- ``project`` (``phpDocumentor\Descriptor\ProjectDescriptor``) - This variable contains the top-level project data generated by phpDocumentor.

- ``node`` (subclass of ``phpDocumentor\Descriptor\DescriptorAbstract``) - This variable contains the data from the transformation query. This will be one of the ``Descriptor`` classes matching the object you query.

Functions
---------

path
~~~~

.. code-block:: twig

    {{ path(relative_path) }}

``relative_path``
    **type**: ``string``

Returns the URL for the given path, relative to the current path.

Filters
-------

markdown
~~~~~~~~

.. code-block:: twig

    {{ text|markdown }}

``text``
    **type**: ``string``

Renders Markdown text into HTML, using the `Parsedown`_ engine.

.. _Parsedown: http://parsedown.org/

trans
~~~~~

.. code-block:: twig

    {{ message|trans(context = []) }}

``message``
    **type**: ``string``
``context`` *(optional)*
    **type**: ``array`` **default**: ``[]``

Renders the translation of the content. Variables in ``context`` are expanded into the translated text using ``vsprintf``.

route
~~~~~

.. code-block:: twig

    {{ node|route(presentation = 'normal') }}

``node``
    **type**: ``phpDocumentor\Descriptor\DescriptorAbstract``
``presentation`` *(optional)*
    **type**: ``string`` **default**: ``normal``

Renders a link to the generated page for the node. ``presentation`` can be set to ``'url'`` to render only the URL.

sort_asc
~~~~~~~~

.. code-block:: twig

    {{ list|sort_asc }}

``list``
    **type**: ``array``

Sorts the given list in ascending order by name, case-insensitively. Uses the ``name`` of each node in the collection to sort. Typically used for sorting a ``phpDocumentor\Descriptor\Collection`` of descriptors.

sort_desc
~~~~~~~~~

.. code-block:: twig

    {{ list|sort_desc }}

``list``
    **type**: ``array``

Sorts the given list in descending order by name, case-insensitively. Uses the ``name`` of each node in the collection to sort. Typically used for sorting a ``phpDocumentor\Descriptor\Collection`` of descriptors.
